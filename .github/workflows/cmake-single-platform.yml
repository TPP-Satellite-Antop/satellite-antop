# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Code Coverage

on:
  push:
    branches: [ "main", "develop" ]
  pull_request: {}

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Generate Coverage Report
      run: |
        cd ${{github.workspace}}/build
        # Capture coverage data (make sure your build uses coverage flags)
        lcov --capture --directory . --output-file coverage.info
        # Optionally remove coverage from system and external libraries
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        # Generate an HTML report for inspection (optional)
        genhtml coverage.info --output-directory coverage-report

    - name: Check Code Coverage
      run: |
        cd ${{github.workspace}}/build
        # Extract the line coverage percentage from the lcov summary
        COVERAGE=$(lcov --summary coverage.info | grep "lines......:" | awk '{print $2}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        # Fail the build if coverage is below 75%
        if (( $(echo "$COVERAGE < 75" | bc -l) )); then
          echo "Code coverage ($COVERAGE%) is below threshold (75%)"
          exit 1
        fi
